<launch>
    <param name="/enable_statistics" value="true"/>
    <arg name="address" default="nico-pi"/>
    <arg name="user" default="nico"/>
    <arg name="sim_case" default="1"/>
    <arg name="init_wps" default="$(find knowledge_server)/config/Initial_WPs.csv"/>
    <arg name="compressed" default="False"/>
    <arg name="logging" default="False"/>
    <arg name="visualize" default="False"/>
    <arg name="machine" default="pi"/>
    <machine name="$(arg machine)" address="$(arg address)" user="$(arg user)" env-loader="/home/nico/catkin_ws/devel/env_new.sh" timeout="10.0" default="false" />
    <arg name="vehicle" default="iris"/>
    <arg name="image_topic" value="/$(arg vehicle)/usb_cam/image_raw"/>
    <arg name="camera_info_topic" value="/$(arg vehicle)/usb_cam/camera_info"/>


    <!-- Stuff for the sitl -->
    <include file="$(find aruco_client)/launch/word2vec_barebones.launch">
        <arg name="sim_case" value="$(arg sim_case)"/>
        <arg name="compressed" value="$(arg compressed)"/>
        <arg name="vehicle" value="$(arg vehicle)"/>
    </include>

    <node pkg="aruco_client" type="wp_node" name="wp_node" output="screen"/>
    <!-- The Knowledgebase shwizzle -->
    <group ns="knowledgebase">
        <rosparam command="load" file="$(find knowledge_server)/config/parameters.yaml"/>
        <node pkg="knowledge_server" name="detection" type="word2vec_detection_reduced.py" output="screen"/>
        <node pkg="knowledge_server" name="tf_server" type="register_tf_server_reduced.py" output="screen"/>
        <node pkg="knowledge_server" name="cam_tf" type="cam_points_transform.py" output="screen"/>
        <node pkg="knowledge_server" name="map_server" type="word2vec_mapping.py" output="screen"/>
        <node pkg="knowledge_server" name="navigator" type="word2vec_navigation.py" output="screen" args="$(arg init_wps)"/>
    </group>

    <!-- Start this by hand on the client machine -->
    <node machine="$(arg machine)" pkg="ml_detector" type="ml_detector_node" name="ml_detector" clear_params="true" output="screen">
		<!-- System Parameters -->
		<param name="system/publish_overlay" value="true" type="boolean"/>
		<param name="system/send_detailed_tag_info" value="true" type="boolean"/>
		<param name="system/show_rejected" value="false" type="boolean"/>
		<param name="system/refine_strategy" value="true" type="boolean"/>
		<param name="system/camera_is_rectified" value="false" type="boolean"/>

		<!-- Detection Parameters  -->
		<rosparam command="load" file="$(find ml_detector)/launch/detect_config.yaml"/>
		<rosparam command="load" file="$(find ml_detector)/launch/board_config.yaml"/>

		<!-- Marker Parameters -->
		<remap from="~detected_markers" to="/ml_landmarks/detected_markers"/>

		<!-- Image Parameters -->
		<remap from="~camera_info" to="$(arg camera_info_topic)"/>
		<remap from="~image_raw" to="$(arg image_topic)"/>
		<param if="$(arg compressed)" name="image_transport" value="compressed"/>
	</node>


    <!-- Stuff for the profiler -->
    <include file="$(find rosprofiler)/launch/nano_profiler.launch">
        <arg name="machine" value="$(arg machine)"/>
        <arg name="sim_case" value="$(arg sim_case)"/>
        <arg name="logging" value="$(arg logging)"/>
    </include>

    <!-- 5. Shutdown file - listening to ensure shutdown happens -->
    <node pkg="rosprofiler" name="shutdown" type="shutdown.py" output="screen" required="true"/>

    <!-- 6. Displaying if imaging is supported -->
    <node if="$(arg visualize)" type="rviz" name="rviz" pkg="rviz" args="-d $(find aruco_client)/config/rviz_config.rviz" />
    <node if="$(arg visualize)" name="image_viewer" pkg="image_view" type="image_view" output="screen">
        <remap from="image" to="/ml_detector/image_overlay"/>
    </node>


</launch>